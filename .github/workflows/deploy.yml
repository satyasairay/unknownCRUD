name: Deploy to Hostinger VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Install backend dependencies
      run: |
        cd backend_py
        pip install -r requirements.txt
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Stop existing service
          sudo systemctl stop unknown-crud || true
          
          # Backup current deployment
          sudo mv /var/www/html /var/www/html.backup.$(date +%Y%m%d_%H%M%S) || true
          
          # Clone/pull latest code
          cd /tmp
          rm -rf unknownCRUD
          git clone https://github.com/${{ github.repository }}.git unknownCRUD
          cd unknownCRUD
          
          # Build frontend
          cd frontend
          npm ci
          npm run build
          cd ..
          
          # Deploy files first
          sudo mkdir -p /var/www/html
          sudo cp -r frontend/dist/* /var/www/html/
          sudo mkdir -p /var/www/html/api
          sudo cp -r backend_py/* /var/www/html/api/
          
          # Setup backend virtual environment in final location
          cd /var/www/html/api
          sudo python3 -m venv env
          sudo chown -R www-data:www-data env/
          sudo -u www-data env/bin/pip install -r requirements.txt
          
          # Setup data directory and scripts
          sudo mkdir -p /var/www/html/data/library
          sudo mkdir -p /var/www/html/scripts
          # Copy all data files including _users.json
          sudo cp -r data/library/* /var/www/html/data/library/ 2>/dev/null || echo "No data files to copy"
          # Ensure _users.json exists
          if [ ! -f /var/www/html/data/library/_users.json ]; then
            echo '[]' | sudo tee /var/www/html/data/library/_users.json
          fi
          sudo cp scripts/init-production.py /var/www/html/scripts/
          
          # Set permissions first
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          sudo chmod -R 775 /var/www/html/data/
          
          # Initialize production environment
          cd /var/www/html
          sudo -u www-data DATA_ROOT=/var/www/html/data/library /var/www/html/api/env/bin/python scripts/init-production.py
          
          # Setup systemd service
          cd /tmp/unknownCRUD
          sudo cp systemd.service /etc/systemd/system/unknown-crud.service
          sudo systemctl daemon-reload
          sudo systemctl enable unknown-crud
          sudo systemctl start unknown-crud
          
          # Setup nginx
          sudo cp nginx.conf /etc/nginx/sites-available/unknown-crud
          sudo ln -sf /etc/nginx/sites-available/unknown-crud /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
          
          # Cleanup
          rm -rf /tmp/unknownCRUD